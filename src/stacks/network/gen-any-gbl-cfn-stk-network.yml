---
AWSTemplateFormatVersion: '2010-09-09'
Description: "---"
Parameters:
  Owner:
    Type: String
    Default: General
  Application:
    Type: String
    Default: any
  AddressPrefix:
    Type: String
    Default: '10.10'
Resources:
  BaseName:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "../shared/gen-any-gbl-cfn-stk-naming.template"
      Parameters: 
        Owner: !Ref Owner
        Application: !Ref Application
  VpcMain:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub 
        - '${AddressPrefix}.0.0/16' 
        - { AddressPrefix: !Ref AddressPrefix }
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  SubnetAzaPublic:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./templates/gen-any-gbl-cfn-stk-subnet.template"
      Parameters: 
        BaseName: !GetAtt BaseName.Outputs.BaseName
        VpcId: !Ref VpcMain
        AvailabilityZone: "a"
        Accessibility: Public
        AddressPrefix: !Ref AddressPrefix
        IpClassC: 0
  SubnetAzbPublic:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./templates/gen-any-gbl-cfn-stk-subnet.template"
      Parameters: 
        BaseName: !GetAtt BaseName.Outputs.BaseName
        VpcId: !Ref VpcMain
        AvailabilityZone: "b"
        Accessibility: Public
        AddressPrefix: !Ref AddressPrefix
        IpClassC: 1
  SubnetAzbPrivate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./templates/gen-any-gbl-cfn-stk-subnet.template"
      Parameters: 
        BaseName: !GetAtt BaseName.Outputs.BaseName
        VpcId: !Ref VpcMain
        AvailabilityZone: "b"
        Accessibility: Private
        AddressPrefix: !Ref AddressPrefix
        IpClassC: 2
  SubnetAzcPrivate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "./templates/gen-any-gbl-cfn-stk-subnet.template"
      Parameters: 
        BaseName: !GetAtt BaseName.Outputs.BaseName
        VpcId: !Ref VpcMain
        AvailabilityZone: "c"
        Accessibility: Private
        AddressPrefix: !Ref AddressPrefix
        IpClassC: 3
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcMain
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-rtb-pub"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcMain
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-rtb-pvt"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  SubnetAzaPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !GetAtt SubnetAzaPublic.Outputs.SubnetReference
  SubnetAzbPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !GetAtt SubnetAzbPublic.Outputs.SubnetReference
  SubnetAzbPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !GetAtt SubnetAzbPrivate.Outputs.SubnetReference
  SubnetAzcPrivateRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !GetAtt SubnetAzcPrivate.Outputs.SubnetReference
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - "${BaseName}-vpc-igw"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VpcMain
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties: 
      DomainName: !Sub '${AWS::Region}.compute.internal'
      DomainNameServers: 
        - AmazonProvidedDNS
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-dos"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  DhcpOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties: 
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VpcMain
  EipAzaPublic:
    Type: AWS::EC2::EIP
    DependsOn: VpcMain
    Properties: 
      Domain: vpc
      PublicIpv4Pool: amazon
  NatGatewayPublic:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EipAzaPublic.AllocationId
      SubnetId: !GetAtt SubnetAzaPublic.Outputs.SubnetReference
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-nat-aza-pub"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  AclMain:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcMain
      Tags:
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-acl"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
  AclEntryAnywhere:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AclMain
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '-1'
        To: '-1'
  SubnetAzaPublicAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - SubnetAzaPublic
    - AclMain
    Properties:
      NetworkAclId: !Ref AclMain
      SubnetId: !GetAtt SubnetAzaPublic.Outputs.SubnetReference
  SubnetAzbPublicAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - SubnetAzbPublic
    - AclMain
    Properties:
      NetworkAclId: !Ref AclMain
      SubnetId: !GetAtt SubnetAzbPublic.Outputs.SubnetReference
  SubnetAzbPrivateAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - SubnetAzbPrivate
    - AclMain
    Properties:
      NetworkAclId: !Ref AclMain
      SubnetId: !GetAtt SubnetAzbPrivate.Outputs.SubnetReference
  SubnetAzcPrivateAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - SubnetAzcPrivate
    - AclMain
    Properties:
      NetworkAclId: !Ref AclMain
      SubnetId: !GetAtt SubnetAzcPrivate.Outputs.SubnetReference
  SecurityGroupVpcDefault:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The default vpc security group
      VpcId: !Ref VpcMain
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: 'Anywhere'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: 'Anywhere'
      GroupName: !Sub
          - "${BaseName}-vpc-spg"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
      Tags: 
      - Key: Name
        Value: !Sub
          - "${BaseName}-vpc-spg"
          - { BaseName: !GetAtt BaseName.Outputs.BaseName }
Outputs:
  MainPublicSubnet:
    Description: The main public subnet
    Value: !Ref SubnetAzaPublic
  MainVpc:
    Description: Blah
    Value: !Ref VpcMain
